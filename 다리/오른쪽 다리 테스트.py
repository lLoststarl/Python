{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d167280",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dynamixel_sdk import *  # Dynamixel SDK import\n",
    "import math\n",
    "import time\n",
    "\n",
    "# Initialize PortHandler instance\n",
    "portHandler = PortHandler('/dev/ttyUSB0')\n",
    "\n",
    "# Initialize PacketHandler instance\n",
    "packetHandler = PacketHandler(2.0)\n",
    "\n",
    "# Initialize GroupSyncWrite instance\n",
    "groupSyncWrite = GroupSyncWrite(portHandler, packetHandler, 116, 4)  # Address 116 is for goal position, and data size is 4\n",
    "\n",
    "# Dynamixel motor IDs\n",
    "HIP_L = 1\n",
    "KNEE_L = 3\n",
    "HIP_R = 2\n",
    "KNEE_R = 4\n",
    "\n",
    "# Constants\n",
    "l1 = 7  # Length of the first limb\n",
    "l2 = 16  # Length of the second limb\n",
    "stepHeight = 5\n",
    "stepClearance = 1\n",
    "\n",
    "def deg_to_dxl(deg):\n",
    "    return int((deg + 150.0) * (1023 / 300.0))  # Convert from degrees to Dynamixel units. Adjust this function as needed.\n",
    "\n",
    "def updateServoPos(target1, target2, char_leg):\n",
    "    if char_leg == 'l':\n",
    "        hip_goal = deg_to_dxl(target1)\n",
    "        knee_goal = deg_to_dxl(target2)\n",
    "        groupSyncWrite.addParam(HIP_L, [DXL_LOBYTE(DXL_LOWORD(hip_goal)), DXL_HIBYTE(DXL_LOWORD(hip_goal)), DXL_LOBYTE(DXL_HIWORD(hip_goal)), DXL_HIBYTE(DXL_HIWORD(hip_goal))])\n",
    "        groupSyncWrite.addParam(KNEE_L, [DXL_LOBYTE(DXL_LOWORD(knee_goal)), DXL_HIBYTE(DXL_LOWORD(knee_goal)), DXL_LOBYTE(DXL_HIWORD(knee_goal)), DXL_HIBYTE(DXL_HIWORD(knee_goal))])\n",
    "    elif char_leg == 'r':\n",
    "        hip_goal = deg_to_dxl(target1)\n",
    "        knee_goal = deg_to_dxl(target2)\n",
    "        groupSyncWrite.addParam(HIP_R, [DXL_LOBYTE(DXL_LOWORD(hip_goal)), DXL_HIBYTE(DXL_LOWORD(hip_goal)), DXL_LOBYTE(DXL_HIWORD(hip_goal)), DXL_HIBYTE(DXL_HIWORD(hip_goal))])\n",
    "        groupSyncWrite.addParam(KNEE_R, [DXL_LOBYTE(DXL_LOWORD(knee_goal)), DXL_HIBYTE(DXL_LOWORD(knee_goal)), DXL_LOBYTE(DXL_HIWORD(knee_goal)), DXL_HIBYTE(DXL_HIWORD(knee_goal))])\n",
    "    \n",
    "    groupSyncWrite.txPacket()\n",
    "    groupSyncWrite.clearParam()\n",
    "\n",
    "def pos(x, y, leg):\n",
    "    hipRad = math.atan(x/z)\n",
    "    hipDeg = math.degrees(hipRad)\n",
    "    z2 = z / math.cos(hipRad)\n",
    "    hipRad1 = math.acos((l1 ** 2 + z2 ** 2 - l2 ** 2) / (2 * l1 * z2))\n",
    "    hipDeg1 = math.degrees(hipRad1)\n",
    "    kneeRad = math.pi - math.acos((l1 ** 2 + l2 ** 2 - z2 ** 2) / (2 * l1 * l2))\n",
    "    kneeDeg = math.degrees(kneeRad)\n",
    "    updateServoPos(hipDeg + hipDeg1, kneeDeg, leg)\n",
    "    \n",
    "    \n",
    "\n",
    "def takeStep(stepLength, stepVelocity):\n",
    "    for i in range(int(stepLength * 2), int(-stepLength * 2), -1):\n",
    "        i /= 2.0\n",
    "        pos(i, stepHeight, 'r')\n",
    "        pos(-i, stepHeight - stepClearance, 'l')\n",
    "        time.sleep(stepVelocity / 1000.0)\n",
    "\n",
    "    for i in range(int(stepLength * 2), int(-stepLength * 2), -1):\n",
    "        i /= 2.0\n",
    "        pos(-i, stepHeight - stepClearance, 'r')\n",
    "        pos(i, stepHeight, 'l')\n",
    "        time.sleep(stepVelocity / 1000.0)\n",
    "\n",
    "def initialize():\n",
    "    for i in range(1070, int(stepHeight * 10), -1):\n",
    "        i /= 100.0\n",
    "        pos(0, i, 'l')\n",
    "        pos(0, i, 'r')\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    # Open port\n",
    "    if portHandler.openPort():\n",
    "        print(\"Succeeded to open the port\")\n",
    "    else:\n",
    "        print(\"Failed to open the port\")\n",
    "        exit()\n",
    "\n",
    "    # Set port baudrate\n",
    "    if portHandler.setBaudRate(57600):\n",
    "        print(\"Succeeded to change the baudrate\")\n",
    "    else:\n",
    "        print(\"Failed to change the baudrate\")\n",
    "        exit()\n",
    "\n",
    "    # Enable Dynamixel Torque\n",
    "    packetHandler.write1ByteTxRx(portHandler, HIP_R, 64, 1)\n",
    "    packetHandler.write1ByteTxRx(portHandler, KNEE_R, 64, 1)\n",
    "\n",
    "    # Initialize and start moving\n",
    "    initialize()\n",
    "    while True:\n",
    "        takeStep(2, 0)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
